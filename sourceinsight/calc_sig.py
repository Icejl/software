
import ctypes
from ctypes import wintypes
import base64

byte_607180 = [  0xE1, 0x62, 0x78, 0x28, 0xF0, 0x7B, 0x21, 0x4D, 0xEF, 0x0B, 
  0xBC, 0x43, 0x13, 0x94, 0x1F, 0x1B, 0x06, 0xAF, 0x3B, 0x85, 
  0xA8, 0xBE, 0xAC, 0xF1, 0xBF, 0x2A, 0x20, 0x3C, 0xD5, 0xEB, 
  0x79, 0xE9, 0x75, 0x82, 0x36, 0x48, 0xC1, 0x58, 0xA3, 0xCB, 
  0xB1, 0xCF, 0x3F, 0x51, 0x4F, 0x0E, 0x5C, 0x6E, 0xEC, 0xEA, 
  0xF6, 0x70, 0x56, 0x33, 0x73, 0x89, 0x0F, 0x0C, 0x54, 0x3A, 
  0x8D, 0x5A, 0xF9, 0x23, 0xBA, 0x8A, 0xE8, 0xB5, 0x25, 0xD6, 
  0x38, 0xDC, 0xB6, 0x2E, 0xF3, 0x6D, 0xB8, 0xFB, 0xFC, 0xC8, 
  0x7F, 0x32, 0xB7, 0x40, 0x64, 0x68, 0xE5, 0x65, 0xCC, 0xA2, 
  0xD7, 0xAA, 0xA9, 0x87, 0x03, 0x17, 0x8B, 0x26, 0xFF, 0x02, 
  0xA6, 0x7C, 0x98, 0xAD, 0xD0, 0x0D, 0xAE, 0xB9, 0x15, 0xD2, 
  0x19, 0x69, 0xDA, 0x12, 0x0A, 0x09, 0x71, 0xD1, 0x84, 0x47, 
  0x39, 0x97, 0x53, 0x66, 0x11, 0x31, 0xFA, 0xEE, 0x3D, 0xB3, 
  0x7A, 0x96, 0x4A, 0xA5, 0xC4, 0x37, 0xE7, 0x08, 0xCD, 0x2B, 
  0x29, 0xA0, 0x1E, 0xE0, 0x10, 0xC9, 0x41, 0x22, 0xDF, 0x63, 
  0x5E, 0x55, 0xC7, 0xD4, 0x5B, 0xA4, 0x24, 0x14, 0x1C, 0x93, 
  0x7E, 0x8E, 0x5D, 0x42, 0x6C, 0x9B, 0x4E, 0x2D, 0x4C, 0x9C, 
  0x9D, 0x34, 0x50, 0x76, 0xDB, 0xF5, 0x45, 0xA7, 0x8C, 0xF2, 
  0xE2, 0xCA, 0xB4, 0x6A, 0x77, 0xD3, 0xC6, 0x81, 0xE6, 0x2F, 
  0x9A, 0x2C, 0x07, 0xA1, 0x44, 0xBD, 0xF7, 0xF8, 0xFD, 0x4B, 
  0x04, 0xC5, 0x49, 0xED, 0xCE, 0x00, 0x95, 0xF4, 0x83, 0x6B, 
  0x90, 0x72, 0xD9, 0x9E, 0xDD, 0x59, 0x57, 0x18, 0xC2, 0x61, 
  0xB2, 0x6F, 0x92, 0x8F, 0xBB, 0x5F, 0xE3, 0x27, 0x1A, 0x91, 
  0x88, 0xC0, 0x1D, 0x30, 0xC3, 0x9F, 0x7D, 0xAB, 0x67, 0xFE, 
  0x80, 0x52, 0x60, 0x16, 0xD8, 0xE4, 0xB0, 0xDE, 0x74, 0x35, 
  0x99, 0x46, 0x3E, 0x86, 0x01, 0x05]


byte_5D8B98 = { 0x32, 0xDF, 0x71, 0xB7, 0x61, 0x3D, 0x6B, 0x57, 0xD7, 0xA1, 
  0x34, 0x38, 0xF2, 0xE1, 0xF3, 0xB8, 0x23, 0xDD, 0x78, 0xB5, 
  0x33, 0x6F, 0xD4, 0xF9, 0xA6, 0xE8, 0xCC, 0x7C, 0x9F, 0xB3, 
  0x22, 0xDA, 0x37, 0xF1, 0x2F, 0x4E, 0xE7, 0x6A, 0x75, 0xA8, 
  0x26, 0xEB, 0x3F, 0x6C, 0x69, 0x20, 0x87, 0x62, 0xA7, 0x41, 
  0x96, 0x90, 0xB4, 0x42, 0x63, 0x99, 0xD0, 0x4D, 0x97, 0xBE, 
  0x40, 0xCF, 0x84, 0xE5, 0x1D, 0x5A, 0x0C, 0x7F, 0xC7, 0xEA, 
  0xEE, 0xEC, 0x00, 0xD5, 0x49, 0x2D, 0x51, 0xAD, 0xB9, 0x89, 
  0x1A, 0x80, 0xF5, 0xFE, 0x91, 0x01, 0x3C, 0x73, 0x93, 0x48, 
  0xA0, 0xE0, 0x94, 0xAA, 0x39, 0x8F, 0x58, 0xE2, 0x31, 0x0B, 
  0xBB, 0xCE, 0x4C, 0xD2, 0x56, 0xC2, 0x5E, 0x27, 0xB6, 0xFB, 
  0x65, 0xAE, 0x9A, 0xB0, 0xEF, 0x36, 0xC5, 0x72, 0x5B, 0x7E, 
  0x54, 0x2C, 0x0F, 0xF6, 0xA9, 0x85, 0x2A, 0xB1, 0x55, 0x60, 
  0xBD, 0x10, 0x86, 0xF7, 0xC1, 0x88, 0x12, 0xED, 0x67, 0xC4, 
  0x74, 0x30, 0x1B, 0xBC, 0x77, 0x52, 0x3E, 0x8C, 0xE6, 0xFF, 
  0x15, 0xDE, 0x6D, 0x14, 0xA2, 0xCD, 0xA3, 0xD6, 0x17, 0x81, 
  0x8D, 0x68, 0xA5, 0xFA, 0x3A, 0x04, 0x21, 0x1F, 0xAC, 0x05, 
  0xA4, 0x76, 0x11, 0x70, 0x9E, 0x46, 0x24, 0x5D, 0xC6, 0xE4, 
  0x95, 0x82, 0x1C, 0xBA, 0x59, 0x09, 0xD9, 0x44, 0x98, 0x92, 
  0x07, 0xAF, 0xC8, 0x45, 0x4B, 0x35, 0x0A, 0x0D, 0xFC, 0x9D, 
  0x16, 0x3B, 0xD3, 0x7D, 0xD1, 0xF4, 0xFD, 0xCA, 0x8E, 0x4F, 
  0xE3, 0xC9, 0x8B, 0xDC, 0x5C, 0xC0, 0x1E, 0x9B, 0x18, 0x02, 
  0x47, 0x03, 0x2B, 0x0E, 0x25, 0x06, 0x6E, 0xF8, 0x5F, 0xBF, 
  0x8A, 0x7B, 0x50, 0xD8, 0x79, 0x9C, 0xAB, 0x43, 0x53, 0xCB, 
  0x66, 0x4A, 0xB2, 0xF0, 0xE9, 0x19, 0x29, 0x7A, 0xC3, 0x08, 
  0x83, 0xDB, 0x64, 0x13, 0x2E, 0x28 };

def get_guid():
    kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
    GetVolumeNameForVolumeMountPoint = kernel32.GetVolumeNameForVolumeMountPointW
    GetVolumeNameForVolumeMountPoint.argtypes = (wintypes.LPCWSTR, wintypes.LPWSTR, wintypes.DWORD)
    GetVolumeNameForVolumeMountPoint.restype = wintypes.BOOL

    drive_letter = 'C:\\'

    volume_name_buffer_size = 1024  # Adjust the buffer size as needed
    volume_name = ctypes.create_unicode_buffer(volume_name_buffer_size)

    # Call the GetVolumeNameForVolumeMountPoint function
    result = GetVolumeNameForVolumeMountPoint(drive_letter, volume_name, volume_name_buffer_size)

    if result:
        return volume_name.value
    else:
        error_code = ctypes.get_last_error()
        print(f"Error {error_code}: Unable to retrieve volume GUID for drive {drive_letter}")
        exit()

def crypt(x,y,data,tab=byte_5D8B98):
    res = []

    for i in range(y):
        t = tab[(x + i + data[0])%256]
        for j in range(1,len(data)):
            t = tab[t ^ data[j]]
        res.append(t)
    return bytes(res)

print(get_guid())

with open(r"C:\ProgramData\Source Insight\4.0\si4.lic",'rb') as f:
    data = f.read()
    offset = data.find(b'<Signature')
    data = data[:offset].replace(b'\r',b'').replace(b'\n',b'').replace(b' ',b'')
    print(data)
    t = crypt(1968,128,data + b'\x00')
    t = base64.b64encode(t)
    print(t)


